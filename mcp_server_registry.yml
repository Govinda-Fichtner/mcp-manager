# MCP Server Registry
# Schema version: 2.0 (evolved from MacbookSetup patterns)
# See CLAUDE.md for server type taxonomy and extension patterns

servers:
  github:
    name: "GitHub MCP Server"
    server_type: "api_based"  # Requires API authentication
    description: "GitHub repository management, issues, pull requests, and code search"
    category: "development"

    source:
      type: "registry"
      image: "ghcr.io/github/github-mcp-server:latest"

    environment_variables:
      - "GITHUB_PERSONAL_ACCESS_TOKEN"

    docker:
      network_mode: "host"

    startup_timeout: 10

  filesystem:
    name: "Filesystem MCP Server"
    server_type: "mount_based"  # Requires volume mounts
    description: "Secure file system access with directory restrictions"
    category: "storage"

    source:
      type: "registry"
      image: "mcp/filesystem:latest"

    environment_variables:
      - "ALLOWED_DIRECTORIES"

    volumes:
      - "${ALLOWED_DIRECTORIES}:/project"

    docker:
      network_mode: "host"

    startup_timeout: 5

  obsidian:
    name: "Obsidian MCP Server"
    server_type: "api_based"  # Uses Obsidian Local REST API
    description: "Comprehensive Obsidian vault management with tools for reading, writing, searching, and managing notes, tags, and frontmatter"
    category: "knowledge"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/cyanheads/obsidian-mcp-server.git"
      image: "local/obsidian-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "OBSIDIAN_API_KEY"
      - "OBSIDIAN_BASE_URL"
      - "OBSIDIAN_VERIFY_SSL"
      - "OBSIDIAN_ENABLE_CACHE"

    docker:
      network_mode: "host"

    startup_timeout: 20  # Extended for cache building when OBSIDIAN_ENABLE_CACHE=true

  circleci:
    name: "CircleCI MCP Server"
    server_type: "api_based"  # Requires API token authentication
    description: "CircleCI pipeline monitoring and management"
    category: "cicd"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/CircleCI-Public/mcp-server-circleci.git"
      image: "local/mcp-server-circleci:latest"
      build_context: "."

    environment_variables:
      - "CIRCLECI_TOKEN"

    docker:
      network_mode: "host"

    startup_timeout: 10

  appsignal:
    name: "AppSignal MCP Server"
    server_type: "api_based"  # Requires API key authentication
    description: "AppSignal application performance monitoring and error tracking"
    category: "monitoring"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/appsignal/appsignal-mcp"
      image: "local/appsignal-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "APPSIGNAL_API_KEY"

    docker:
      network_mode: "host"

    startup_timeout: 10

  figma:
    name: "Figma Context MCP Server"
    server_type: "api_based"  # Requires API key authentication
    description: "Figma design data extraction optimized for AI orchestration with intelligent design filtering"
    category: "design"

    source:
      type: "registry"  # Pull from registry
      image: "ghcr.io/metorial/mcp-container--glips--figma-context-mcp--figma-context-mcp:latest"

    environment_variables:
      - "FIGMA_API_KEY"

    docker:
      network_mode: "host"

    startup_timeout: 10

  heroku:
    name: "Heroku Platform MCP Server"
    server_type: "api_based"  # Requires API key authentication
    description: "Official Heroku platform management - app lifecycle, database operations, and infrastructure automation"
    category: "platform"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/heroku/heroku-mcp-server.git"
      image: "local/heroku-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "HEROKU_API_KEY"

    docker:
      network_mode: "host"

    startup_timeout: 10

  terraform:
    name: "Terraform MCP Server"
    server_type: "standalone"  # No authentication required
    description: "Terraform Registry API access - provider documentation, module discovery, and registry information"
    category: "infrastructure"

    source:
      type: "registry"  # Pull from registry
      image: "hashicorp/terraform-mcp-server:latest"

    docker:
      network_mode: "host"

    startup_timeout: 10

  context7:
    name: "Context7 Documentation MCP Server"
    server_type: "standalone"  # No authentication required
    description: "Context7 library documentation server - up-to-date documentation and code examples for any programming library"
    category: "documentation"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/upstash/context7.git"
      image: "local/context7-mcp:latest"
      build_context: "."

    docker:
      network_mode: "host"

    startup_timeout: 10

  memory-service:
    name: "Memory Service MCP Server"
    server_type: "mount_based"  # Requires Docker volume mounts
    description: "Persistent memory storage and retrieval using ChromaDB for AI applications"
    category: "memory"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/doobidoo/mcp-memory-service.git"
      image: "local/mcp-server-memory-service:latest"
      build_context: "."

    environment_variables:
      - "MCP_MEMORY_CHROMA_PATH"
      - "MCP_MEMORY_BACKUPS_PATH"

    volumes:
      - "MCP_MEMORY_CHROMA_PATH:/app/chroma_db"
      - "MCP_MEMORY_BACKUPS_PATH:/app/backups"

    docker:
      network_mode: "host"

    startup_timeout: 10

  mailgun:
    name: "Mailgun MCP Server"
    server_type: "api_based"  # Requires API key authentication
    description: "Mailgun email service integration for AI-orchestrated email automation workflows"
    category: "email"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/mailgun/mailgun-mcp-server.git"
      image: "local/mailgun-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "MAILGUN_API_KEY"
      - "MAILGUN_DOMAIN"

    docker:
      network_mode: "host"

    startup_timeout: 10

  rails:
    name: "Rails MCP Server"
    server_type: "mount_based"  # Requires Docker volume mounts
    description: "Rails project management and inspection"
    category: "development"

    source:
      type: "registry"  # Pull from registry
      image: "local/mcp-server-rails:latest"

    environment_variables:
      - "RAILS_MCP_ROOT_PATH"
      - "RAILS_MCP_CONFIG_HOME"

    volumes:
      - "RAILS_MCP_ROOT_PATH:/rails-projects"
      - "RAILS_MCP_CONFIG_HOME:/app/.config/rails-mcp"

    docker:
      network_mode: "host"

    startup_timeout: 10

  sonarqube:
    name: "SonarQube MCP Server"
    server_type: "mount_based"  # Requires Docker volume mounts
    description: "SonarQube Cloud/Server integration for code quality analysis, issue management, and project metrics"
    category: "code"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/SonarSource/sonarqube-mcp-server.git"
      image: "local/sonarqube-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "SONARQUBE_TOKEN"
      - "SONARQUBE_ORG"
      - "SONARQUBE_URL"
      - "SONARQUBE_STORAGE_PATH"

    volumes:
      - "SONARQUBE_STORAGE_PATH:/app/storage"

    docker:
      network_mode: "host"

    startup_timeout: 10

  playwright:
    name: "Playwright MCP Server"
    server_type: "mount_based"  # Requires Docker volume mounts
    description: "Microsoft Playwright browser automation for AI-orchestrated web testing and automation workflows"
    category: "automation"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/microsoft/playwright-mcp.git"
      image: "local/playwright-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "PLAYWRIGHT_BROWSER_PATH"
      - "PLAYWRIGHT_SCREENSHOTS_PATH"

    volumes:
      - "PLAYWRIGHT_SCREENSHOTS_PATH:/app/output"

    docker:
      network_mode: "host"
      cmd: ["--headless", "--browser", "chromium", "--no-sandbox", "--output-dir", "/app/output"]

    startup_timeout: 10

  linear:
    name: "Linear MCP Server"
    server_type: "remote"  # Remote Cloudflare Workers endpoint
    description: "Linear project management via Cloudflare-hosted MCP server"
    category: "project_management"

    source:
      type: "remote"  # Remote SSE endpoint
      url: "https://mcp.linear.app/sse"

    docker:
      network_mode: "host"

    startup_timeout: 10

  recraft:
    name: "Recraft MCP Server"
    server_type: "mount_based"  # Requires Docker volume mounts
    description: "AI-powered image generation and manipulation via Recraft AI"
    category: "ai_image"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/recraft-ai/mcp-recraft-server.git"
      image: "local/recraft-mcp-server:latest"
      build_context: "."

    environment_variables:
      - "RECRAFT_API_KEY"
      - "IMAGE_STORAGE_DIRECTORY"
      - "RECRAFT_REMOTE_RESULTS_STORAGE"

    volumes:
      - "IMAGE_STORAGE_DIRECTORY:IMAGE_STORAGE_DIRECTORY"

    docker:
      network_mode: "host"

    startup_timeout: 10

  docker:
    name: "Docker MCP Server"
    server_type: "privileged"  # Requires special permissions
    description: "Docker container management and inspection"
    category: "system"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/ckreiling/mcp-server-docker"
      image: "mcp-server-docker:latest"
      build_context: "."

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

    docker:
      network_mode: "host"

    startup_timeout: 10

  kubernetes:
    name: "Kubernetes MCP Server"
    server_type: "privileged"  # Requires special permissions
    description: "Native Go-based Kubernetes and OpenShift management - advanced community K8s MCP server"
    category: "infrastructure"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/manusa/kubernetes-mcp-server.git"
      image: "local/mcp-server-kubernetes:latest"
      build_context: "."

    environment_variables:
      - "KUBECONFIG"
      - "K8S_NAMESPACE"
      - "K8S_CONTEXT"

    volumes:
      - "KUBECONFIG_HOST:/root/.kube/config:ro"

    docker:
      network_mode: "host"
      cmd: ["--log-level", "0"]

    startup_timeout: 10

  terraform-cli-controller:
    name: "Terraform CLI Controller"
    server_type: "privileged"  # Requires special permissions
    description: "Rust-based CLI tool for AI assistants to manage Terraform environments with configuration analysis"
    category: "infrastructure"

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/nwiizo/tfmcp.git"
      image: "local/terraform-cli-controller:latest"
      build_context: "."

    environment_variables:
      - "TERRAFORM_HOST_DIR"

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "HOME/.aws:/root/.aws:ro"
      - "TERRAFORM_HOST_DIR:/workspace"

    docker:
      network_mode: "host"
      cmd: ["mcp"]

    startup_timeout: 10

  debugger:
    name: "DAP MCP Server"
    server_type: "mount_based"  # Requires volume mounts for debugging workspace
    description: "Debug Adapter Protocol (DAP) server enabling AI agents to debug applications across multiple languages (Python, Ruby, Node.js, Go, Rust)"
    category: "development"

    # ⚠️ WARNING: This server is NOT MCP-compliant and will not work
    # Issue: Uses LSP-style Content-Length headers instead of raw JSON-RPC
    # The MCP specification requires raw JSON-RPC over stdio (one JSON per line)
    # but this server expects LSP format: "Content-Length: N\r\n\r\n{json}"
    # See: src/mcp/transport.rs lines 22-42
    # Status: Builds successfully but fails health check (hangs waiting for headers)

    source:
      type: "repository"  # Clone and build from repository
      repository: "https://github.com/Govinda-Fichtner/debugger-mcp.git"
      image: "local/debugger-mcp:latest"
      build_context: "."
      dockerfile: "Dockerfile.mcp"

    environment_variables:
      - "DEBUGGER_WORKSPACE"

    volumes:
      - "DEBUGGER_WORKSPACE:/workspace"

    docker:
      network_mode: "host"
      cmd: ["debugger_mcp", "serve"]

    startup_timeout: 15

# Global configuration
global:
  build_directory: "./mcp_builds"
  network_name: "mcp-network"
  default_timeout: 10
